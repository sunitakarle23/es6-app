//function prototyping

/**
 * provide inheritance functionality in js
 * we can extend the functionality of given object which avoid repitation
 */

 // e.g
 	Object.prototype.getValue = function(name){
 		return name;
 	}

 	Object.prototype.getValue('sunita');

// result
	"sunita"

// delegation
	/**
	* Event delegation is used when user wants to add event listener to list which items max 10000
	* here without delegation we need to add event listener to each items
	* which gives low performance & created event each items to avoid this event delegation used
	* in delegation we add listener to its wrapper window & taregt that element when clicked
	*/

	// e.g
		/*<ul id="list">
			<li class="item">item1</li>
			<li class="item">item1</li>
			<li class="item">item1</li>
			<li class="item">item1</li>
			<li class="item">item1</li>
		</ul>
	without delegation:
	 let items = document.getElementByClassName('item');
	 for(let i =0 ; i<items.length ; i++){
	 	items[i].addEventListener('click',function(){
			//execute function
			}
	 	})
	 }

	using delegation & bubbling
		let itemcontainer = document.getElementById('list')
		itemcontainer.addEventListener('click',function(e){
			if(e.target && e.target,nodeName == 'li'){
				//execute function
			}
		})

		*/
//clousers remember the context in which it created

function getName(name){

	return function(){
		console.log(name);
	}
}

getName('sunita')()

 //2.   function factory (craeating namespace )
var s = (function(){
	var lname = 'Sumbe';  //private variable

    //this is private function we cannot access this from outside of this function
	var checkString = function(str){
		if(str!==''){
			return str;
		}else{
			return false;
		}
	}
	var str= function(){
		return checkString(lname);
	}
console.log("",str());
})();
/*
output-
    VM676:13  Sumbe
*/

function getValue(name){
	return function(lname){
		return name + '' + lname;
	}
}

getValue('Sunita')('sumbe')

/*
output-
"Sunitasumbe"
*/
function getValue(name){
	return function(lname){
		return name + '' + lname;
	}
}

var fname = getValue('Sunita');
fname('sumbe');
/*
output-
"Sunitasumbe"
*/


// debouncing

/**
* debouncing set delays an event like window scroll ,resize
* whenever this event called it executes very quikly & each time functions
* called to stop this we debouce to set delay to execute code
*/

// debounce function that will wrap our event
function debounce(fn, delay) {
  // maintain a timer
  let timer = null;
  // closure function that has access to timer
  return function() {
    // get the scope and parameters of the function
    // via 'this' and 'arguments'
    let context = this;
    let args = arguments;
    // if event is called, clear the timer and start over
    clearTimeout(timer);
    timer = setTimeout(function() {
      fn.apply(context, args);
    }, delay);
  }
}


// function to be called when user scrolls
function foo() {
  console.log('You are scrolling!');
}

// wrap our function in a debounce to fire once 2 seconds have gone by
let elem = document.getElementById('container');
elem.addEventListener('scroll', debounce(foo, 2000));

// throttling
    /**
    * Executes function every given time,
    * e.g for infinite scrolling
    * we need to add new data when user is near to bottom of the page
    * debounce doesn't use here because it works when scroll stops
    * here  we use throttling check the scroll position at every 100 seconds if its near to bottom load new data.
    * so user does not know when data loaded
    * With _.throttle we can warranty that we are checking constantly how far we are from the bottom.
    */

/**
* debounce: Grouping a sudden burst of events (like keystrokes) into a single one.
* throttle: Guaranteeing a constant flow of executions every X milliseconds.
* Like checking every 200ms your scroll position to trigger a CSS animation.
*/

/**
this/ new 4 rules
	1. with new keyword
		when created object using new keyword this context created newly.
	2. call , apply & bind
		when we want to borrowed any function to another use call/apply method both are same
		only diff is passing arguments
		call- arguments knows
		apply - arguments in array &  dont know how many

	means using call & apply we get other class function & use it

	student.display.call(result,10,20)
	student.display.apply(result,[10,20,...])

	this is a context of which function call

	bind -
		when we wants to use access properties of other functions bind use

	3. using . operator
		- this is a current context when use . operator

		function Student(name){
			this.name = name
		}

	4. free function
		here this context is window
		function without block
		function student(){
			console.log("hi");
		}
 */


 /**
 * creating a class in javscript
 * 1. using function
 */

 	function Student(name){
		this.name = name;
		this.class = 'First';
		this.getInfo = getInfoDetails;
	 }

	function getInfoDetails(){
		return this.name + ''+this.class;
	}
	var s = new Student('Sunita');
	s.class="second";
	s.getInfo()

  /**
   * 2. using prototype
   * above function recreates the obeject each time
   * by using prototype we bind the functio  to its constructor it avoid recreation
  */
  	Student.prototype.getInfoDetails = function(){
  		return this.name + ''+this.class;
  	}

 /**
  * 3. Using new
  */

	function Student(name){
		this.name = name;
		this.class = 'First';
		this.getInfo = function(){
			return this.name + ''+this.class;
		};
	 }

	var s = new Student('Sunita');
	s.getInfo();

 /**
  * 4. By using singletone
  */

  var m = new function(){
	console.log("hi");
}

//result-
//	"Sunitasecond"

/**
 * hoisting rules  where to declaring variables or functions
 */


/** Operatoprs
 * 1. Uniary
*/
let x = 1;
x = -x;
console.log(x)

	//VM308:3 -1

// 2. Binary
	let v = 8;
	x = m - 2;
	console.log(x)

	//VM308:3 6

/**
 * 3. String concat
 * String concatenation and conversion is a special feature of the binary plus "+".
 * Other arithmetic operators work only with numbers.
 * They always convert their operands to numbers.
*/
	let f= 'Sunita';
	let l = 'Sumbe';
    console.log(l + '' + f);

	//VM397:4 SumbeSunita

	s= 'Sunita';
	 l = 2;
		console.log(s + '' + l);
	//VM423:4 Sunita2

		s= 3;
		l = 2;
		console.log(s + '' + l);
	//VM425:4 32

	s= 3;
	l = 2;
	console.log(s + l);
	//VM426:4 5

/**
 * Exponentiation **
 * The exponentiation operator ** is a recent addition to the language.
 * For a natural number b,
 * the result of a ** b is a multiplied by itself b times.
 */

//e.g
	alert( 2 ** 2 ); // 4  (2 * 2)
	alert( 2 ** 3 ); // 8  (2 * 2 * 2)
	alert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)

	alert( 4 ** (1/2) ); // 2 (power of 1/2 is the same as a square root, that's maths)
	alert( 8 ** (1/3) ); // 2 (power of 1/3 is the same as a cubic root)

/**
 * Comma
 * The comma operator allows us to evaluate several expressions, dividing them with a comma ','. Each of them is evaluated,
 * but the result of only the last one is returned.
*/

let a = (1 + 2, 3 + 4);

alert( a ); // 7 (the result of 3 + 4)